#!/usr/bin/env sh

# Define Monokai color codes
ESCAPE="\033"
RESET="${ESCAPE}[0m"
FG_RED="${ESCAPE}[38;5;197m"      # F92672
FG_GREEN="${ESCAPE}[38;5;148m"    # A6E22E
FG_YELLOW="${ESCAPE}[38;5;222m"   # F4BF75
FG_BLUE="${ESCAPE}[38;5;81m"      # 66D9EF
FG_MAGENTA="${ESCAPE}[38;5;141m"  # AE81FF
FG_CYAN="${ESCAPE}[38;5;122m"     # A1EFE4
FG_WHITE="${ESCAPE}[38;5;255m"    # F8F8F2
FG_BRIGHT_BLACK="${ESCAPE}[38;5;244m" # 75715E
FG_BRIGHT_YELLOW="${ESCAPE}[38;5;220m" # E6DB74
FG_BRIGHT_WHITE="${ESCAPE}[38;5;253m"  # F9F8F5

# Array of colors to cycle through
COLORS=($FG_RED $FG_GREEN $FG_YELLOW $FG_BLUE $FG_MAGENTA $FG_CYAN $FG_WHITE $FG_BRIGHT_BLACK $FG_BRIGHT_YELLOW $FG_BRIGHT_WHITE)

# Function to start a process and redirect its output with color, process name, and timestamp
start_process() {
  local name="$1"
  local cmd="$2"
  local color="$3"

  echo -e "${color}Starting $name: $cmd${RESET}"
  (env RUBY_DEBUG_OPEN=true bash -c "${cmd}" 2>&1 | while IFS= read -r line; do
    local timestamp=$(date '+%H:%M:%S')
    if [[ "$last_name" != "$name" ]]; then
      printf "%s\n" "$(printf '%*s' "$(tput cols)" | tr ' ' '-')"
      last_name="$name"
    fi
    printf "%b[%s %s]%b %s\n" "$color" "$timestamp" "$name" "$RESET" "$line"
  done) &
  pids+=($!)
}

# Procfile name
PROCFILE="${1:-Procfile}"

# Check if Procfile exists
if [[ ! -f "$PROCFILE" ]]; then
  echo "Procfile '$PROCFILE' not found!"
  exit 1
fi

# Array to hold process IDs
pids=()

# Counter to cycle through colors
color_counter=0

# Read the Procfile line by line
while IFS=: read -r name cmd; do
  # Trim leading and trailing whitespace from name and cmd
  name=$(echo "$name" | xargs)
  cmd=$(echo "$cmd" | xargs)

  # Skip lines starting with # or //
  if [[ "$name" == \#* || "$name" == //* ]]; then
    continue
  fi

  # Get the current color
  color="${COLORS[$color_counter]}"

  # Start the process
  start_process "$name" "$cmd" "$color"

  # Update the color counter
  color_counter=$(( (color_counter + 1) % ${#COLORS[@]} ))
done < "$PROCFILE"

# Wait for all processes to finish
for pid in "${pids[@]}"; do
  wait $pid
done
